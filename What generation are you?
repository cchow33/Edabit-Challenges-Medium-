// Create a function that takes a number x and a character y ("m" for male, "f" for female), and returns the name of an ancestor (m/f) or descendant (m/f).

If the number is negative, return the related ancestor.
If positive, return the related descendant.
You are generation 0. In the case of 0 (male or female), return "me!".


// SOLUTION #1:
function generation(x, y) {
    let f = ['great grandmother', 'grandmother', 'mother', 'me!', 'daughter', 
            'granddaughter', 'great granddaughter'];
    let m = ['great grandfather', 'grandfather', 'father', 'me!', 'son', 
            'grandson', 'great grandson'];
    return y === 'f' ? f[x + 3] : m[x + 3];
};


console.log(generation(2, "f")) // granddaughter
console.log(generation(-3, "m")) // great grandfather
console.log(generation(1, "f"))  // daughter

// SOLUTION #2:
function generation(x,y) {
	const generations = {
		"-3": ["great grandfather",	"great grandmother"],
		"-2": ["grandfather",	"grandmother"],
		"-1": ["father", "mother"],
		 0: ["me!", "me!"],
		 1: ["son", "daughter"],
		 2: ["grandson",	"granddaughter"],
		 3: ["great grandson",	"great granddaughter"]
	}
	return generations[x][y === "m" ? 0 : 1]
}
